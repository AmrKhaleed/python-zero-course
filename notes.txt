#Terminal Commands In A Bullet Casing#
pwd : Print Working Directory (Current Directory) (where tf am i)
ls : List Files In Directory   
cd {Directory Name} : Change Directory (ex : cd Desktop/)
cd .. : Back To Previous Directory
cd : Returns To Root Directory
mkdir : Make New Directory (Folder)
rmdir : Remove Directory    
touch : Make New File
rm : Remove File
code . : Open Directory In VS Code
start . OR explorer . : Opens Current File In File Explorer
clear : Delete Terminal Contents
------------------------------------------------------------------------------
#Git  Commands#
git init : Initialize Git Repo
git log : Print Log
git status : Print Status
git add . :  Add All Files In Directory To Repo
git commit -m "Message" :  Commit Files To Repo With A Message

#Upload To Online Git Hub#
git remote add origin {Git URL From Github}
git push origin master : Push Changes To master Branch {Branch Name}
git pull origin master : Pull Changes From master Branch {Branch Name}
git clone {Link} : Download Linked Repo
------------------------------------------------------------------------------
#Python Shortcuts (Notes)#
; => Ends Line
CTRL + / => Make Line Comment
help("Keywords") => Lists Unusable Words To Name Variables
+ => Concatenate or MERGE Two Variables Together
You can't put special characters  in variables or their values
Ctrl + D => Selects two similar words 
Ctrl + F => Search Words (And used to replace them :0)
Ctrl + F2 => Selects all similar words
------------------------------------------------------------------------------
#Define#
(type) => Type Of Given Data 
Variables => Python uses variables to allocate data in the computer memory whatever that means, Syntax => [Variable Name] [Assigment Operator] [Value] {myVariable = "My Value"}
| Variable names must start with either (a-z), (A-Z) or _ Underscore and it can not include special characters and must be assigned before printing
Source Code : Original Code You Write it in Computer
Translation : Converting Source Code Into Machine Language
Compilation : Translate Code Before Run Time
Run-Time : Period App Takes To Execute Commands
Interpreted : Code Translated On The Fly During Execution
Concatenation : Attaching Strings, Variables, Or Integers With Each Other
------------------------------------------------------------------------------
#Escape Sequences Characters#
\b => Backspace
\ => Escape New Line + \ {So it can be put in a line of code to neglect the following letter} {It can also be used to solve code problems when putting words in quotes while still seeing them printed \"\"} {An alterantive is using Triple Double or Triple Single Quotes}
\n => Line Feed {Seperates Line Into Two Lines Under Each Other}
\r => Carriage Return {Puts following letters or numbers first in print and removes a number of letters or numbers equal to it from the back}
\t => Horizontal Tab {Seperates Between Words By A Tab Distance}
\xhh => Character Hex Value {Type Using Letter Hex Values}
------------------------------------------------------------------------------
#Slicing And Indexing
By Using [] you can access specified parts of your variable value for whatever reason
for example having 
myIndexTest = "I Love Python" (Note that the index in python starts from 0 so the "I" in this case is element No. 0)
print(myIndexTest[2]) => This will grant you "L"
you  may use  slicing with a start and end point [4:9] and in case a start point is not included you will start from 0 and vice versa no endpoint then it goes to the end and if no end or start point they just take the whole value
------------------------------------------------------------------------------
#String Methods#
len() => Prints number of characters in a string
.strip(), .rstrip(), .lstrip ("put any characters you want removed here") => Gives number of characters in a string but by removing all spaces, left spaces or right spaces and is used as follows a = "   S   ", print(a.strip) = 1
.title() => Makes the first letter of your words caps
.capitalize() => Makes the first letter of your string caps and the rest is all small
.zfill() => Fills Appropriate number of given zeros before int you want {Using total number of int wanted}
.upper, .lower => Makes current string characters all upper case or lower case
.split, .rsplit => splits between words by a given seperator and maxsplit like so ... a = "I Love My Local Air Force" print(a.split("-", 3)), The "-" is a seperator indication and the "3" is the max split in elements so it will split 3 times then continue normally and using rsplit it will just split from the end
.center => Centers the string between a given number of total numbers in the parameter with a specific symbol character or int whatever a = "Korgii" print(a.center(10, "#")) => ##Korgii##
.count => Counts number of times a certain parameter has been written in your variable by full scan or by giving it a start and end point, print(a.count("Python", 1, 35)) note that it is case sensitive so the parameter must be typical
.swapcase => Swaps all caps words with small ones and vice versa in the string
.startswith, .endswith => Confirms via boolean wheather the variable ends with a given parameter or by giving it a start and end point too
.index => Looks for given Element in variable and gives you it's position using numbers EXCEPT it gives an error if the element is not found and you can  give the start and end and parameter
.find => Looks for given Element in variable and gives you it's position using numbers EXCEPT it gives -1 if the element is not found and you can  give the start and end and parameter
.rjust, .ljust => Fills out total  given number of elements with spaces if no fill char is provided or a specific fill char if provided
.splitlines => Creates list with multiple line var
.expandtabs => Increases seperation  distance  when using \t
.replace => Replaces given keyword in "" with another given word or number and the possibility to limit  the number of replacements print
.join => Joins list as string ? print("seperator".join(var))
--------------------------------------------------------------------------------
.isidentifier => Checks  if its a proper variable
.isupper, .islower => Checks if all value is upper or lower case
.isalpha => checks if the string is alphabetical
.isalnum => checks if string is both alphabetical and numerical
.isspace => checks if its an empty space ?
.istitle => Checks if all first letters are caps
---------------------------------------------------------------------------------
#Formatting#
Old Way : Using place holders to concatenate strings with integers using %s for strings %f for floaters and %d for digits ---> print("My name is: %s and i cost: %f in the black market and im : %d years old" % (name, price, age))
